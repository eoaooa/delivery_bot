import os
import json
from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart

from config import ADMIN_ID
from keyboards import (
    main_menu, catalog_menu, confirm_menu,
    location_phone_menu, quantity_menu
)

router = Router()

user_data = {}
cart_data = {}

@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\nüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!",
        reply_markup=main_menu
    )

@router.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=catalog_menu)

@router.message(F.text.in_(["üçî –ë—É—Ä–≥–µ—Ä", "ü•§ –ù–∞–ø–∏—Ç–æ–∫"]))
async def select_product(message: Message):
    user_id = message.from_user.id
    product = message.text
    prices = {"üçî –ë—É—Ä–≥–µ—Ä": 20000, "ü•§ –ù–∞–ø–∏—Ç–æ–∫": 10000}
    user_data[user_id] = {"product": product, "price": prices[product]}
    await message.answer(f"–°–∫–æ–ª—å–∫–æ '{product}' –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=quantity_menu)

@router.message(F.text.in_([str(i) for i in range(1, 6)]))
async def set_quantity(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.")

    quantity = int(message.text)
    item = user_data.pop(user_id)
    cart = cart_data.setdefault(user_id, {})
    name = item["product"]

    if name in cart:
        cart[name]["quantity"] += quantity
    else:
        cart[name] = {"price": item["price"], "quantity": quantity}

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {name} ‚Äî {quantity} —à—Ç.", reply_markup=confirm_menu)

@router.message(F.text == "üõç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def show_cart(message: Message):
    user_id = message.from_user.id
    cart = cart_data.get(user_id)
    if not cart:
        return await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    for name, item in cart.items():
        subtotal = item["price"] * item["quantity"]
        total += subtotal
        text += f"{name} ‚Äî {item['quantity']} x {item['price']} = {subtotal} —Å—É–º\n"
    text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} —Å—É–º"

    await message.answer(text, reply_markup=confirm_menu)

@router.message(F.text == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: Message):
    user_id = message.from_user.id
    cart_data.pop(user_id, None)
    await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_menu)

@router.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout_order(message: Message):
    user_id = message.from_user.id
    cart = cart_data.get(user_id)
    if not cart:
        return await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    
    total = sum(item["price"] * item["quantity"] for item in cart.values())

    text = "<b>üßæ –í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    for name, item in cart.items():
        text += f"{name} ‚Äî {item['quantity']} x {item['price']} = {item['quantity'] * item['price']} —Å—É–º\n"
    text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} —Å—É–º"

    await message.answer(text, reply_markup=location_phone_menu)

@router.message(F.location)
async def get_location(message: Message):
    user_id = message.from_user.id
    if user_id not in cart_data:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.")

    cart_data[user_id]["latitude"] = message.location.latitude
    cart_data[user_id]["longitude"] = message.location.longitude
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä", reply_markup=location_phone_menu)

@router.message(F.contact)
async def get_contact(message: Message):
    user_id = message.from_user.id
    if user_id not in cart_data:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.")

    cart_data[user_id]["phone"] = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    if not os.path.exists("orders.json"):
        with open("orders.json", "w") as f:
            json.dump([], f)

    with open("orders.json", "r") as f:
        orders = json.load(f)

    order = cart_data[user_id]
    orders.append(order)

    with open("orders.json", "w") as f:
        json.dump(orders, f, indent=4)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    text = "<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n\n"
    for name, item in order.items():
        if isinstance(item, dict):
            text += f"{name} ‚Äî {item['quantity']} x {item['price']} = {item['quantity'] * item['price']} —Å—É–º\n"
    text += (
        f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
        f"üåç https://maps.google.com/?q={order['latitude']},{order['longitude']}"
    )

    await message.bot.send_message(ADMIN_ID, text)
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    await message.answer("üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)
    cart_data.pop(user_id)
